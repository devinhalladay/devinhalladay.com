!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i;i="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,i.BboxAlignedText=t()}}(function(){return function t(i,e,s){function o(h,r){if(!e[h]){if(!i[h]){var _="function"==typeof require&&require;if(!r&&_)return _(h,!0);if(n)return n(h,!0);var a=new Error("Cannot find module '"+h+"'");throw a.code="MODULE_NOT_FOUND",a}var f=e[h]={exports:{}};i[h][0].call(f.exports,function(t){var e=i[h][1][t];return o(e?e:t)},f,f.exports,t,i,e,s)}return e[h].exports}for(var n="function"==typeof require&&require,h=0;h<s.length;h++)o(s[h]);return o}({1:[function(t,i,e){function s(t,i,e,n,h,r){this._font=t,this._text=i,this._x=o["default"](n,0),this._y=o["default"](h,0),this._fontSize=o["default"](e,12),this._p=o["default"](r,window),this._rotation=0,this._hAlign=s.ALIGN.BOX_CENTER,this._vAlign=s.BASELINE.BOX_CENTER,this._calculateMetrics(!0)}var o=t("./utils.js");i.exports=s,s.ALIGN={BOX_LEFT:"box_left",BOX_CENTER:"box_center",BOX_RIGHT:"box_right"},s.BASELINE={BOX_TOP:"box_top",BOX_CENTER:"box_center",BOX_BOTTOM:"box_bottom",FONT_CENTER:"font_center",ALPHABETIC:"alphabetic"},s.prototype.setText=function(t){return this._text=t,this._calculateMetrics(!1),this},s.prototype.setPosition=function(t,i){return this._x=o["default"](t,this._x),this._y=o["default"](i,this._y),this},s.prototype.getPosition=function(){return{x:this._x,y:this._y}},s.prototype.setTextSize=function(t){return this._fontSize=t,this._calculateMetrics(!0),this},s.prototype.setRotation=function(t){return this._rotation=o["default"](t,this._rotation),this},s.prototype.getRotation=function(t){return this._rotation},s.prototype.setPInstance=function(t){return this._p=o["default"](t,this._p),this},s.prototype.getPInstance=function(){return this._p},s.prototype.setAnchor=function(t,i,e){var n=this._calculateAlignedCoords(this._x,this._y);if(this._hAlign=o["default"](t,s.ALIGN.CENTER),this._vAlign=o["default"](i,s.BASELINE.CENTER),e){var h=this._calculateAlignedCoords(this._x,this._y);this._x+=n.x-h.x,this._y+=n.y-h.y}return this},s.prototype.getBbox=function(t,i){this.setPosition(t,i);var e=this._calculateAlignedCoords(this._x,this._y);return{x:e.x+this._boundsOffset.x,y:e.y+this._boundsOffset.y,w:this.width,h:this.height}},s.prototype.getTextPoints=function(t,i,e){this.setPosition(t,i);for(var s=this._font.textToPoints(this._text,this._x,this._y,this._fontSize,e),o=0;o<s.length;o+=1){var n=this._calculateAlignedCoords(s[o].x,s[o].y);s[o].x=n.x,s[o].y=n.y}return s},s.prototype.draw=function(t,i,e){e=o["default"](e,!1),this.setPosition(t,i);var s={x:this._x,y:this._y};if(this._p.push(),this._rotation&&(s=this._calculateRotatedCoords(s.x,s.y,this._rotation),this._p.rotate(this._rotation)),s=this._calculateAlignedCoords(s.x,s.y),this._p.textAlign(this._p.LEFT,this._p.BASELINE),this._p.textFont(this._font),this._p.textSize(this._fontSize),this._p.text(this._text,s.x,s.y),e){this._p.stroke(200);var n=s.x+this._boundsOffset.x,h=s.y+this._boundsOffset.y;this._p.noFill(),this._p.rect(n,h,this.width,this.height)}this._p.pop()},s.prototype._calculateRotatedCoords=function(t,i,e){var s=Math.cos(e)*t+Math.cos(Math.PI/2-e)*i,o=-Math.sin(e)*t+Math.sin(Math.PI/2-e)*i;return{x:s,y:o}},s.prototype._calculateAlignedCoords=function(t,i){var e,o;switch(this._hAlign){case s.ALIGN.BOX_LEFT:e=t;break;case s.ALIGN.BOX_CENTER:e=t-this.halfWidth;break;case s.ALIGN.BOX_RIGHT:e=t-this.width;break;default:e=t,console.log("Unrecognized horizonal align:",this._hAlign)}switch(this._vAlign){case s.BASELINE.BOX_TOP:o=i-this._boundsOffset.y;break;case s.BASELINE.BOX_CENTER:o=i+this._distBaseToMid;break;case s.BASELINE.BOX_BOTTOM:o=i-this._distBaseToBottom;break;case s.BASELINE.FONT_CENTER:o=i-this._descent+(this._ascent+this._descent)/2;break;case s.BASELINE.ALPHABETIC:o=i;break;default:o=i,console.log("Unrecognized vertical align:",this._vAlign)}return{x:e,y:o}},s.prototype._calculateMetrics=function(t){var i=this._font.textBounds(this._text,1e3,1e3,this._fontSize);i={x:i.x-1e3,y:i.y-1e3,w:i.w,h:i.h},t&&(this._ascent=this._font._textAscent(this._fontSize),this._descent=this._font._textDescent(this._fontSize)),this.width=i.w,this.height=i.h,this.halfWidth=this.width/2,this.halfHeight=this.height/2,this._boundsOffset={x:i.x,y:i.y},this._distBaseToMid=Math.abs(i.y)-this.halfHeight,this._distBaseToBottom=this.height-Math.abs(i.y)}},{"./utils.js":2}],2:[function(t,i,e){e["default"]=function(t,i){return void 0!==t?t:i}},{}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvYmJveC1hbGlnbmVkLXRleHQuanMiLCJiYm94LWFsaWduZWQtdGV4dC5qcyIsImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsIkJib3hBbGlnbmVkVGV4dCIsImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJFcnJvciIsImNvZGUiLCJsIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJmb250IiwidGV4dCIsImZvbnRTaXplIiwieCIsInkiLCJwSW5zdGFuY2UiLCJfZm9udCIsIl90ZXh0IiwiX3giLCJ1dGlscyIsIl95IiwiX2ZvbnRTaXplIiwiX3AiLCJfcm90YXRpb24iLCJfaEFsaWduIiwiQUxJR04iLCJCT1hfQ0VOVEVSIiwiX3ZBbGlnbiIsIkJBU0VMSU5FIiwiX2NhbGN1bGF0ZU1ldHJpY3MiLCJCT1hfTEVGVCIsIkJPWF9SSUdIVCIsIkJPWF9UT1AiLCJCT1hfQk9UVE9NIiwiRk9OVF9DRU5URVIiLCJBTFBIQUJFVElDIiwicHJvdG90eXBlIiwic2V0VGV4dCIsInN0cmluZyIsInNldFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJzZXRUZXh0U2l6ZSIsInNldFJvdGF0aW9uIiwiYW5nbGUiLCJnZXRSb3RhdGlvbiIsInNldFBJbnN0YW5jZSIsInAiLCJnZXRQSW5zdGFuY2UiLCJzZXRBbmNob3IiLCJoQWxpZ24iLCJ2QWxpZ24iLCJ1cGRhdGVQb3NpdGlvbiIsIm9sZFBvcyIsIl9jYWxjdWxhdGVBbGlnbmVkQ29vcmRzIiwiQ0VOVEVSIiwibmV3UG9zIiwiZ2V0QmJveCIsInBvcyIsIl9ib3VuZHNPZmZzZXQiLCJ3Iiwid2lkdGgiLCJoIiwiaGVpZ2h0IiwiZ2V0VGV4dFBvaW50cyIsIm9wdGlvbnMiLCJwb2ludHMiLCJ0ZXh0VG9Qb2ludHMiLCJkcmF3IiwiZHJhd0JvdW5kcyIsInB1c2giLCJfY2FsY3VsYXRlUm90YXRlZENvb3JkcyIsInJvdGF0ZSIsInRleHRBbGlnbiIsIkxFRlQiLCJ0ZXh0Rm9udCIsInRleHRTaXplIiwic3Ryb2tlIiwiYm91bmRzWCIsImJvdW5kc1kiLCJub0ZpbGwiLCJyZWN0IiwicG9wIiwicngiLCJNYXRoIiwiY29zIiwiUEkiLCJyeSIsInNpbiIsIm5ld1giLCJuZXdZIiwiaGFsZldpZHRoIiwiY29uc29sZSIsImxvZyIsIl9kaXN0QmFzZVRvTWlkIiwiX2Rpc3RCYXNlVG9Cb3R0b20iLCJfZGVzY2VudCIsIl9hc2NlbnQiLCJzaG91bGRVcGRhdGVIZWlnaHQiLCJib3VuZHMiLCJ0ZXh0Qm91bmRzIiwiX3RleHRBc2NlbnQiLCJfdGV4dERlc2NlbnQiLCJoYWxmSGVpZ2h0IiwiYWJzIiwiLi91dGlscy5qcyIsIjIiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsR0FBQSxHQUFBLGdCQUFBQyxVQUFBLG1CQUFBQyxRQUFBQSxPQUFBRCxRQUFBRCxRQUFBLElBQUEsa0JBQUFHLFNBQUFBLE9BQUFDLElBQUFELFVBQUFILE9BQUEsQ0FBQSxHQUFBSyxFQUFBQSxHQUFBLG1CQUFBQyxRQUFBQSxPQUFBLG1CQUFBQyxRQUFBQSxPQUFBLG1CQUFBQyxNQUFBQSxLQUFBQyxLQUFBSixFQUFBSyxnQkFBQVYsTUFBQSxXQUFBLE1BQUEsU0FBQVcsR0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxRQUFBQyxHQUFBQyxFQUFBQyxHQUFBLElBQUFKLEVBQUFHLEdBQUEsQ0FBQSxJQUFBSixFQUFBSSxHQUFBLENBQUEsR0FBQUUsR0FBQSxrQkFBQUMsVUFBQUEsT0FBQSxLQUFBRixHQUFBQyxFQUFBLE1BQUFBLEdBQUFGLEdBQUEsRUFBQSxJQUFBSSxFQUFBLE1BQUFBLEdBQUFKLEdBQUEsRUFBQSxJ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QW9GLFlBQUE1RyxLQUFBNkIsV0FDQTdCLEtBQUF1RyxTQUFBdkcsS0FBQXdCLE1BQUFxRixhQUFBN0csS0FBQTZCLFlBSUE3QixLQUFBb0UsTUFBQXNDLEVBQUF2QyxFQUNBbkUsS0FBQXNFLE9BQUFvQyxFQUFBckMsRUFDQXJFLEtBQUFrRyxVQUFBbEcsS0FBQW9FLE1BQUEsRUFDQXBFLEtBQUE4RyxXQUFBOUcsS0FBQXNFLE9BQUEsRUFDQXRFLEtBQUFrRSxlQUFBN0MsRUFBQXFGLEVBQUFyRixFQUFBQyxFQUFBb0YsRUFBQXBGLEdBQ0F0QixLQUFBcUcsZUFBQVYsS0FBQW9CLElBQUFMLEVBQUFwRixHQUFBdEIsS0FBQThHLFdBQ0E5RyxLQUFBc0csa0JBQUF0RyxLQUFBc0UsT0FBQXFCLEtBQUFvQixJQUFBTCxFQUFBcEYsTUNHRzBGLGFBQWEsSUFBSUMsR0FBRyxTQUFTdkcsRUFBUWpCLEVBQU9ELEdDblovQ0EsRUFBQUEsV0FBQSxTQUFBMEgsRUFBQUMsR0FDQSxNQUFBQyxVQUFBRixFQUFBQSxFQUFBQyxhRHNaVyxJQUFJIiwiZmlsZSI6ImJib3gtYWxpZ25lZC10ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmJveEFsaWduZWRUZXh0O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgQmJveEFsaWduZWRUZXh0IG9iamVjdCAtIGEgdGV4dCBvYmplY3QgdGhhdCBjYW4gYmUgZHJhd24gd2l0aFxyXG4gKiBhbmNob3IgcG9pbnRzIGJhc2VkIG9uIGEgdGlnaHQgYm91bmRpbmcgYm94IGFyb3VuZCB0aGUgdGV4dC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBmb250IC0gcDUuRm9udCBvYmplY3RcclxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBTdHJpbmcgdG8gZGlzcGxheVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2ZvbnRTaXplPTEyXSAtIEZvbnQgc2l6ZSB0byB1c2UgZm9yIHN0cmluZ1xyXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBJbml0aWFsIHggbG9jYXRpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gSW5pdGlhbCB5IGxvY2F0aW9uXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcEluc3RhbmNlPXdpbmRvd10gLSBSZWZlcmVuY2UgdG8gcDUgaW5zdGFuY2UsIGxlYXZlIGJsYW5rIGlmXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2V0Y2ggaXMgZ2xvYmFsXHJcbiAqIEBleGFtcGxlXHJcbiAqIHZhciBmb250LCBiYm94VGV4dDtcclxuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcclxuICogICAgIGZvbnQgPSBsb2FkRm9udChcIi4vYXNzZXRzL1JlZ3VsYXIudHRmXCIpO1xyXG4gKiB9XHJcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xyXG4gKiAgICAgY3JlYXRlQ2FudmFzKDQwMCwgNjAwKTtcclxuICogICAgIGJhY2tncm91bmQoMCk7XHJcbiAqICAgICBcclxuICogICAgIGJib3hUZXh0ID0gbmV3IEJib3hBbGlnbmVkVGV4dChmb250LCBcIkhleSFcIiwgMzApOyAgICBcclxuICogICAgIGJib3hUZXh0LnNldFJvdGF0aW9uKFBJIC8gNCk7XHJcbiAqICAgICBiYm94VGV4dC5zZXRBbmNob3IoQmJveEFsaWduZWRUZXh0LkFMSUdOLkJPWF9DRU5URVIsIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5CT1hfQ0VOVEVSKTtcclxuICogICAgIFxyXG4gKiAgICAgZmlsbChcIiMwMEE4RUFcIik7XHJcbiAqICAgICBub1N0cm9rZSgpO1xyXG4gKiAgICAgYmJveFRleHQuZHJhdyh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBCYm94QWxpZ25lZFRleHQoZm9udCwgdGV4dCwgZm9udFNpemUsIHgsIHksIHBJbnN0YW5jZSkge1xyXG4gICAgdGhpcy5fZm9udCA9IGZvbnQ7XHJcbiAgICB0aGlzLl90ZXh0ID0gdGV4dDtcclxuICAgIHRoaXMuX3ggPSB1dGlscy5kZWZhdWx0KHgsIDApO1xyXG4gICAgdGhpcy5feSA9IHV0aWxzLmRlZmF1bHQoeSwgMCk7XHJcbiAgICB0aGlzLl9mb250U2l6ZSA9IHV0aWxzLmRlZmF1bHQoZm9udFNpemUsIDEyKTtcclxuICAgIHRoaXMuX3AgPSB1dGlscy5kZWZhdWx0KHBJbnN0YW5jZSwgd2luZG93KTtcclxuICAgIHRoaXMuX3JvdGF0aW9uID0gMDtcclxuICAgIHRoaXMuX2hBbGlnbiA9IEJib3hBbGlnbmVkVGV4dC5BTElHTi5CT1hfQ0VOVEVSO1xyXG4gICAgdGhpcy5fdkFsaWduID0gQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkJPWF9DRU5URVI7XHJcbiAgICB0aGlzLl9jYWxjdWxhdGVNZXRyaWNzKHRydWUpO1xyXG59XHJcblxyXG4vKipcclxuICogVmVydGljYWwgYWxpZ25tZW50IHZhbHVlc1xyXG4gKiBAcHVibGljXHJcbiAqIEBzdGF0aWNcclxuICogQHJlYWRvbmx5XHJcbiAqIEBlbnVtIHtzdHJpbmd9XHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQuQUxJR04gPSB7XHJcbiAgICAvKiogRHJhdyBmcm9tIHRoZSBsZWZ0IG9mIHRoZSBiYm94ICovXHJcbiAgICBCT1hfTEVGVDogXCJib3hfbGVmdFwiLFxyXG4gICAgLyoqIERyYXcgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBiYm94ICovXHJcbiAgICBCT1hfQ0VOVEVSOiBcImJveF9jZW50ZXJcIixcclxuICAgIC8qKiBEcmF3IGZyb20gdGhlIHJpZ2h0IG9mIHRoZSBiYm94ICovXHJcbiAgICBCT1hfUklHSFQ6IFwiYm94X3JpZ2h0XCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBCYXNlbGluZSBhbGlnbm1lbnQgdmFsdWVzXHJcbiAqIEBwdWJsaWNcclxuICogQHN0YXRpY1xyXG4gKiBAcmVhZG9ubHlcclxuICogQGVudW0ge3N0cmluZ31cclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5CQVNFTElORSA9IHtcclxuICAgIC8qKiBEcmF3IGZyb20gdGhlIHRvcCBvZiB0aGUgYmJveCAqL1xyXG4gICAgQk9YX1RPUDogXCJib3hfdG9wXCIsXHJcbiAgICAvKiogRHJhdyBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGJib3ggKi9cclxuICAgIEJPWF9DRU5URVI6IFwiYm94X2NlbnRlclwiLFxyXG4gICAgLyoqIERyYXcgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSBiYm94ICovXHJcbiAgICBCT1hfQk9UVE9NOiBcImJveF9ib3R0b21cIixcclxuICAgIC8qKiBcclxuICAgICAqIERyYXcgZnJvbSBoYWxmIHRoZSBoZWlnaHQgb2YgdGhlIGZvbnQuIFNwZWNpZmljYWxseSB0aGUgaGVpZ2h0IGlzXHJcbiAgICAgKiBjYWxjdWxhdGVkIGFzOiBhc2NlbnQgKyBkZXNjZW50LlxyXG4gICAgICovXHJcbiAgICBGT05UX0NFTlRFUjogXCJmb250X2NlbnRlclwiLFxyXG4gICAgLyoqIERyYXcgZnJvbSB0aGUgdGhlIG5vcm1hbCBmb250IGJhc2VsaW5lICovXHJcbiAgICBBTFBIQUJFVElDOiBcImFscGhhYmV0aWNcIlxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCBjdXJyZW50IHRleHRcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gVGV4dCBzdHJpbmcgdG8gZGlzcGxheVxyXG4gKiBAcmV0dXJucyB7dGhpc30gVXNlZnVsIGZvciBjaGFpbmluZ1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgICB0aGlzLl90ZXh0ID0gc3RyaW5nO1xyXG4gICAgdGhpcy5fY2FsY3VsYXRlTWV0cmljcyhmYWxzZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHRleHQgcG9zaXRpb25cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggcG9zaXRpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBZIHBvc2l0aW9uXHJcbiAqIEByZXR1cm5zIHt0aGlzfSBVc2VmdWwgZm9yIGNoYWluaW5nXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgdGhpcy5feCA9IHV0aWxzLmRlZmF1bHQoeCwgdGhpcy5feCk7XHJcbiAgICB0aGlzLl95ID0gdXRpbHMuZGVmYXVsdCh5LCB0aGlzLl95KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgdGV4dCBwb3NpdGlvblxyXG4gKiBAcHVibGljXHJcbiAqIEByZXR1cm4ge29iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzOiB4LCB5XHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHg6IHRoaXMuX3gsXHJcbiAgICAgICAgeTogdGhpcy5feVxyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgY3VycmVudCB0ZXh0IHNpemVcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge251bWJlcn0gZm9udFNpemUgVGV4dCBzaXplXHJcbiAqIEByZXR1cm5zIHt0aGlzfSBVc2VmdWwgZm9yIGNoYWluaW5nXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLnNldFRleHRTaXplID0gZnVuY3Rpb24oZm9udFNpemUpIHtcclxuICAgIHRoaXMuX2ZvbnRTaXplID0gZm9udFNpemU7XHJcbiAgICB0aGlzLl9jYWxjdWxhdGVNZXRyaWNzKHRydWUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IHJvdGF0aW9uIG9mIHRleHRcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBSb3RhdGlvbiBpbiByYWRpYW5zXHJcbiAqIEByZXR1cm5zIHt0aGlzfSBVc2VmdWwgZm9yIGNoYWluaW5nXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLnNldFJvdGF0aW9uID0gZnVuY3Rpb24oYW5nbGUpIHtcclxuICAgIHRoaXMuX3JvdGF0aW9uID0gdXRpbHMuZGVmYXVsdChhbmdsZSwgdGhpcy5fcm90YXRpb24pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHJvdGF0aW9uIG9mIHRleHRcclxuICogQHB1YmxpY1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSb3RhdGlvbiBpbiByYWRpYW5zXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLmdldFJvdGF0aW9uID0gZnVuY3Rpb24oYW5nbGUpIHtcclxuICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHAgaW5zdGFuY2UgdGhhdCBpcyB1c2VkIGZvciBkcmF3aW5nXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtvYmplY3R9IHAgLSBJbnN0YW5jZSBvZiBwNSBmb3IgZHJhd2luZy4gVGhpcyBpcyBvbmx5IG5lZWRlZCB3aGVuIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgIHVzaW5nIGFuIG9mZnNjcmVlbiByZW5kZXJlciBvciB3aGVuIHVzaW5nIHA1IGluIGluc3RhbmNlXHJcbiAqICAgICAgICAgICAgICAgICAgICAgbW9kZS5cclxuICogQHJldHVybnMge3RoaXN9IFVzZWZ1bCBmb3IgY2hhaW5pbmdcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuc2V0UEluc3RhbmNlID0gZnVuY3Rpb24ocCkge1xyXG4gICAgdGhpcy5fcCA9IHV0aWxzLmRlZmF1bHQocCwgdGhpcy5fcCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgcm90YXRpb24gb2YgdGV4dFxyXG4gKiBAcHVibGljXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IEluc3RhbmNlIG9mIHA1IHRoYXQgaXMgYmVpbmcgdXNlZCBmb3IgZHJhd2luZ1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5nZXRQSW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9wO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCBhbmNob3IgcG9pbnQgZm9yIHRleHQgKGhvcml6b25hbCBhbmQgdmVydGljYWwgYWxpZ25tZW50KSByZWxhdGl2ZSB0b1xyXG4gKiBib3VuZGluZyBib3hcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2hBbGlnbj1DRU5URVJdIC0gSG9yaXpvbmFsIGFsaWdubWVudFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW3ZBbGlnbj1DRU5URVJdIC0gVmVydGljYWwgYmFzZWxpbmVcclxuICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlUG9zaXRpb249ZmFsc2VdIC0gSWYgc2V0IHRvIHRydWUsIHRoZSBwb3NpdGlvbiBvZiB0aGVcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRleHQgd2lsbCBiZSBzaGlmdGVkIHNvIHRoYXRcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRleHQgd2lsbCBiZSBkcmF3biBpbiB0aGUgc2FtZVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZSBpdCB3YXMgYmVmb3JlIGNhbGxpbmcgXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEFuY2hvci5cclxuICogQHJldHVybnMge3RoaXN9IFVzZWZ1bCBmb3IgY2hhaW5pbmdcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuc2V0QW5jaG9yID0gZnVuY3Rpb24oaEFsaWduLCB2QWxpZ24sIHVwZGF0ZVBvc2l0aW9uKSB7XHJcbiAgICB2YXIgb2xkUG9zID0gdGhpcy5fY2FsY3VsYXRlQWxpZ25lZENvb3Jkcyh0aGlzLl94LCB0aGlzLl95KTtcclxuICAgIHRoaXMuX2hBbGlnbiA9IHV0aWxzLmRlZmF1bHQoaEFsaWduLCBCYm94QWxpZ25lZFRleHQuQUxJR04uQ0VOVEVSKTtcclxuICAgIHRoaXMuX3ZBbGlnbiA9IHV0aWxzLmRlZmF1bHQodkFsaWduLCBCYm94QWxpZ25lZFRleHQuQkFTRUxJTkUuQ0VOVEVSKTtcclxuICAgIGlmICh1cGRhdGVQb3NpdGlvbikge1xyXG4gICAgICAgIHZhciBuZXdQb3MgPSB0aGlzLl9jYWxjdWxhdGVBbGlnbmVkQ29vcmRzKHRoaXMuX3gsIHRoaXMuX3kpO1xyXG4gICAgICAgIHRoaXMuX3ggKz0gb2xkUG9zLnggLSBuZXdQb3MueDtcclxuICAgICAgICB0aGlzLl95ICs9IG9sZFBvcy55IC0gbmV3UG9zLnk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGJvdW5kaW5nIGJveCB3aGVuIHRoZSB0ZXh0IGlzIHBsYWNlZCBhdCB0aGUgc3BlY2lmaWVkIGNvb3JkaW5hdGVzLlxyXG4gKiBOb3RlOiB0aGlzIGlzIHRoZSB1bnJvdGF0ZWQgYm91bmRpbmcgYm94ISBUT0RPOiBGaXggdGhpcy5cclxuICogQHBhcmFtIHtudW1iZXJ9IFt4PWN1cnJlbnQgeF0gLSBBIG5ldyB4IGNvb3JkaW5hdGUgb2YgdGV4dCBhbmNob3IuIFRoaXNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGNoYW5nZSB0aGUgdGV4dCdzIHggcG9zaXRpb24gXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFuZW50bHkuIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3k9Y3VycmVudCB5XSAtIEEgbmV3IHkgY29vcmRpbmF0ZSBvZiB0ZXh0IGFuY2hvci4gVGhpc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgY2hhbmdlIHRoZSB0ZXh0J3MgeCBwb3NpdGlvbiBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtYW5lbnRseS5cclxuICogQHJldHVybiB7b2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6IHgsIHksIHcsIGhcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuZ2V0QmJveCA9IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICB2YXIgcG9zID0gdGhpcy5fY2FsY3VsYXRlQWxpZ25lZENvb3Jkcyh0aGlzLl94LCB0aGlzLl95KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogcG9zLnggKyB0aGlzLl9ib3VuZHNPZmZzZXQueCxcclxuICAgICAgICB5OiBwb3MueSArIHRoaXMuX2JvdW5kc09mZnNldC55LFxyXG4gICAgICAgIHc6IHRoaXMud2lkdGgsXHJcbiAgICAgICAgaDogdGhpcy5oZWlnaHRcclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IGFuIGFycmF5IG9mIHBvaW50cyB0aGF0IGZvbGxvdyBhbG9uZyB0aGUgdGV4dCBwYXRoLiBUaGlzIHdpbGwgdGFrZSBpbnRvXHJcbiAqIGNvbnNpZGVyYXRpb24gdGhlIGN1cnJlbnQgYWxpZ25tZW50IHNldHRpbmdzLlxyXG4gKiBOb3RlOiB0aGlzIGlzIGEgdGhpbiB3cmFwcGVyIGFyb3VuZCBhIHA1IG1ldGhvZCBhbmQgZG9lc24ndCBoYW5kbGUgdW5yb3RhdGVkXHJcbiAqIHRleHQhIFRPRE86IEZpeCB0aGlzLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9Y3VycmVudCB4XSAtIEEgbmV3IHggY29vcmRpbmF0ZSBvZiB0ZXh0IGFuY2hvci4gVGhpc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgY2hhbmdlIHRoZSB0ZXh0J3MgeCBwb3NpdGlvbiBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtYW5lbnRseS4gXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT1jdXJyZW50IHldIC0gQSBuZXcgeSBjb29yZGluYXRlIG9mIHRleHQgYW5jaG9yLiBUaGlzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBjaGFuZ2UgdGhlIHRleHQncyB4IHBvc2l0aW9uIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1hbmVudGx5LlxyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gQW4gb2JqZWN0IHRoYXQgY2FuIGhhdmU6XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gc2FtcGxlRmFjdG9yOiByYXRpbyBvZiBwYXRoLWxlbmd0aCB0byBudW1iZXJcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBzYW1wbGVzIChkZWZhdWx0PTAuMjUpLiBIaWdoZXIgdmFsdWVzIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIG1vcmVwb2ludHMgYW5kIGFyZSB0aGVyZWZvcmUgbW9yZSBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNlLiBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBzaW1wbGlmeVRocmVzaG9sZDogaWYgc2V0IHRvIGEgbm9uLXplcm8gXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsIGNvbGxpbmVhciBwb2ludHMgd2lsbCBiZSByZW1vdmVkLiBUaGVcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSByZXByZXNlbnRzIHRoZSB0aHJlc2hvbGQgYW5nbGUgdG8gdXNlXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBkZXRlcm1pbmluZyB3aGV0aGVyIHR3byBlZGdlcyBhcmUgXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGluZWFyLlxyXG4gKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgcG9pbnRzLCBlYWNoIHdpdGggeCwgeSAmIGFscGhhICh0aGUgcGF0aCBhbmdsZSlcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuZ2V0VGV4dFBvaW50cyA9IGZ1bmN0aW9uKHgsIHksIG9wdGlvbnMpIHtcclxuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICB2YXIgcG9pbnRzID0gdGhpcy5fZm9udC50ZXh0VG9Qb2ludHModGhpcy5fdGV4dCwgdGhpcy5feCwgdGhpcy5feSwgXHJcbiAgICAgICAgdGhpcy5fZm9udFNpemUsIG9wdGlvbnMpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICB2YXIgcG9zID0gdGhpcy5fY2FsY3VsYXRlQWxpZ25lZENvb3Jkcyhwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnkpO1xyXG4gICAgICAgIHBvaW50c1tpXS54ID0gcG9zLng7XHJcbiAgICAgICAgcG9pbnRzW2ldLnkgPSBwb3MueTtcclxuICAgIH1cclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcblxyXG4vKipcclxuICogRHJhd3MgdGhlIHRleHQgcGFydGljbGUgd2l0aCB0aGUgc3BlY2lmaWVkIHN0eWxlIHBhcmFtZXRlcnMuIE5vdGU6IHRoaXMgaXNcclxuICogZ29pbmcgdG8gc2V0IHRoZSB0ZXh0Rm9udCwgdGV4dFNpemUgJiByb3RhdGlvbiBiZWZvcmUgZHJhd2luZy4gWW91IHNob3VsZCBzZXRcclxuICogdGhlIGNvbG9yL3N0cm9rZS9maWxsIHRoYXQgeW91IHdhbnQgYmVmb3JlIGRyYXdpbmcuIFRoaXMgZnVuY3Rpb24gd2lsbCBjbGVhblxyXG4gKiB1cCBhZnRlciBpdHNlbGYgYW5kIHJlc2V0IHN0eWxpbmcgYmFjayB0byB3aGF0IGl0IHdhcyBiZWZvcmUgaXQgd2FzIGNhbGxlZC5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9Y3VycmVudCB4XSAtIEEgbmV3IHggY29vcmRpbmF0ZSBvZiB0ZXh0IGFuY2hvci4gVGhpcyB3aWxsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgdGhlIHRleHQncyB4IHBvc2l0aW9uIHBlcm1hbmVudGx5LiBcclxuICogQHBhcmFtIHtudW1iZXJ9IFt5PWN1cnJlbnQgeV0gLSBBIG5ldyB5IGNvb3JkaW5hdGUgb2YgdGV4dCBhbmNob3IuIFRoaXMgd2lsbFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSB0aGUgdGV4dCdzIHggcG9zaXRpb24gcGVybWFuZW50bHkuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RyYXdCb3VuZHM9ZmFsc2VdIC0gRmxhZyBmb3IgZHJhd2luZyBib3VuZGluZyBib3hcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKHgsIHksIGRyYXdCb3VuZHMpIHtcclxuICAgIGRyYXdCb3VuZHMgPSB1dGlscy5kZWZhdWx0KGRyYXdCb3VuZHMsIGZhbHNlKTtcclxuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICB2YXIgcG9zID0ge1xyXG4gICAgICAgIHg6IHRoaXMuX3gsIFxyXG4gICAgICAgIHk6IHRoaXMuX3lcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fcC5wdXNoKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGlvbikge1xyXG4gICAgICAgICAgICBwb3MgPSB0aGlzLl9jYWxjdWxhdGVSb3RhdGVkQ29vcmRzKHBvcy54LCBwb3MueSwgdGhpcy5fcm90YXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLl9wLnJvdGF0ZSh0aGlzLl9yb3RhdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb3MgPSB0aGlzLl9jYWxjdWxhdGVBbGlnbmVkQ29vcmRzKHBvcy54LCBwb3MueSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3AudGV4dEFsaWduKHRoaXMuX3AuTEVGVCwgdGhpcy5fcC5CQVNFTElORSk7XHJcbiAgICAgICAgdGhpcy5fcC50ZXh0Rm9udCh0aGlzLl9mb250KTtcclxuICAgICAgICB0aGlzLl9wLnRleHRTaXplKHRoaXMuX2ZvbnRTaXplKTtcclxuICAgICAgICB0aGlzLl9wLnRleHQodGhpcy5fdGV4dCwgcG9zLngsIHBvcy55KTtcclxuXHJcbiAgICAgICAgaWYgKGRyYXdCb3VuZHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fcC5zdHJva2UoMjAwKTtcclxuICAgICAgICAgICAgdmFyIGJvdW5kc1ggPSBwb3MueCArIHRoaXMuX2JvdW5kc09mZnNldC54O1xyXG4gICAgICAgICAgICB2YXIgYm91bmRzWSA9IHBvcy55ICsgdGhpcy5fYm91bmRzT2Zmc2V0Lnk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Aubm9GaWxsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3AucmVjdChib3VuZHNYLCBib3VuZHNZLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgIHRoaXMuX3AucG9wKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUHJvamVjdCB0aGUgY29vcmRpbmF0ZXMgKHgsIHkpIGludG8gYSByb3RhdGVkIGNvb3JkaW5hdGUgc3lzdGVtXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb29yZGluYXRlIChpbiB1bnJvdGF0ZWQgc3BhY2UpXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWSBjb29yZGluYXRlIChpbiB1bnJvdGF0ZWQgc3BhY2UpXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFJhZGlhbnMgb2Ygcm90YXRpb24gdG8gYXBwbHlcclxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCB4ICYgeSBwcm9wZXJ0aWVzXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLl9jYWxjdWxhdGVSb3RhdGVkQ29vcmRzID0gZnVuY3Rpb24gKHgsIHksIGFuZ2xlKSB7ICBcclxuICAgIHZhciByeCA9IE1hdGguY29zKGFuZ2xlKSAqIHggKyBNYXRoLmNvcyhNYXRoLlBJIC8gMiAtIGFuZ2xlKSAqIHk7XHJcbiAgICB2YXIgcnkgPSAtTWF0aC5zaW4oYW5nbGUpICogeCArIE1hdGguc2luKE1hdGguUEkgLyAyIC0gYW5nbGUpICogeTtcclxuICAgIHJldHVybiB7eDogcngsIHk6IHJ5fTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGRyYXcgY29vcmRpbmF0ZXMgZm9yIHRoZSB0ZXh0LCBhbGlnbmluZyBiYXNlZCBvbiB0aGUgYm91bmRpbmcgYm94LlxyXG4gKiBUaGUgdGV4dCBpcyBldmVudHVhbGx5IGRyYXduIHdpdGggY2FudmFzIGFsaWdubWVudCBzZXQgdG8gbGVmdCAmIGJhc2VsaW5lLCBzb1xyXG4gKiB0aGlzIGZ1bmN0aW9uIHRha2VzIGEgZGVzaXJlZCBwb3MgJiBhbGlnbm1lbnQgYW5kIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlXHJcbiAqIGNvb3JkaW5hdGVzIGZvciB0aGUgbGVmdCAmIGJhc2VsaW5lLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZVxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIHggJiB5IHByb3BlcnRpZXNcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuX2NhbGN1bGF0ZUFsaWduZWRDb29yZHMgPSBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICB2YXIgbmV3WCwgbmV3WTtcclxuICAgIHN3aXRjaCAodGhpcy5faEFsaWduKSB7XHJcbiAgICAgICAgY2FzZSBCYm94QWxpZ25lZFRleHQuQUxJR04uQk9YX0xFRlQ6XHJcbiAgICAgICAgICAgIG5ld1ggPSB4O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5BTElHTi5CT1hfQ0VOVEVSOlxyXG4gICAgICAgICAgICBuZXdYID0geCAtIHRoaXMuaGFsZldpZHRoO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5BTElHTi5CT1hfUklHSFQ6XHJcbiAgICAgICAgICAgIG5ld1ggPSB4IC0gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgbmV3WCA9IHg7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5yZWNvZ25pemVkIGhvcml6b25hbCBhbGlnbjpcIiwgdGhpcy5faEFsaWduKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHRoaXMuX3ZBbGlnbikge1xyXG4gICAgICAgIGNhc2UgQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkJPWF9UT1A6XHJcbiAgICAgICAgICAgIG5ld1kgPSB5IC0gdGhpcy5fYm91bmRzT2Zmc2V0Lnk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkJPWF9DRU5URVI6XHJcbiAgICAgICAgICAgIG5ld1kgPSB5ICsgdGhpcy5fZGlzdEJhc2VUb01pZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCYm94QWxpZ25lZFRleHQuQkFTRUxJTkUuQk9YX0JPVFRPTTpcclxuICAgICAgICAgICAgbmV3WSA9IHkgLSB0aGlzLl9kaXN0QmFzZVRvQm90dG9tO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5GT05UX0NFTlRFUjpcclxuICAgICAgICAgICAgLy8gSGVpZ2h0IGlzIGFwcHJveGltYXRlZCBhcyBhc2NlbnQgKyBkZXNjZW50XHJcbiAgICAgICAgICAgIG5ld1kgPSB5IC0gdGhpcy5fZGVzY2VudCArICh0aGlzLl9hc2NlbnQgKyB0aGlzLl9kZXNjZW50KSAvIDI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkFMUEhBQkVUSUM6XHJcbiAgICAgICAgICAgIG5ld1kgPSB5O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBuZXdZID0geTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbnJlY29nbml6ZWQgdmVydGljYWwgYWxpZ246XCIsIHRoaXMuX3ZBbGlnbik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHt4OiBuZXdYLCB5OiBuZXdZfTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBib3VuZGluZyBib3ggYW5kIHZhcmlvdXMgbWV0cmljcyBmb3IgdGhlIGN1cnJlbnQgdGV4dCBhbmQgZm9udFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5fY2FsY3VsYXRlTWV0cmljcyA9IGZ1bmN0aW9uKHNob3VsZFVwZGF0ZUhlaWdodCkgeyAgXHJcbiAgICAvLyBwNSAwLjUuMCBoYXMgYSBidWcgLSB0ZXh0IGJvdW5kcyBhcmUgY2xpcHBlZCBieSAoMCwgMClcclxuICAgIC8vIENhbGN1bGF0aW5nIGJvdW5kcyBoYWNrXHJcbiAgICB2YXIgYm91bmRzID0gdGhpcy5fZm9udC50ZXh0Qm91bmRzKHRoaXMuX3RleHQsIDEwMDAsIDEwMDAsIHRoaXMuX2ZvbnRTaXplKTtcclxuICAgIC8vIEJvdW5kcyBpcyBhIHJlZmVyZW5jZSAtIGlmIHdlIG1lc3Mgd2l0aCBpdCBkaXJlY3RseSwgd2UgY2FuIG1lc3MgdXAgXHJcbiAgICAvLyBmdXR1cmUgdmFsdWVzISAoSXQgY2hhbmdlcyB0aGUgYmJveCBjYWNoZSBpbiBwNS4pXHJcbiAgICBib3VuZHMgPSB7IFxyXG4gICAgICAgIHg6IGJvdW5kcy54IC0gMTAwMCwgXHJcbiAgICAgICAgeTogYm91bmRzLnkgLSAxMDAwLCBcclxuICAgICAgICB3OiBib3VuZHMudywgXHJcbiAgICAgICAgaDogYm91bmRzLmggXHJcbiAgICB9OyBcclxuXHJcbiAgICBpZiAoc2hvdWxkVXBkYXRlSGVpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5fYXNjZW50ID0gdGhpcy5fZm9udC5fdGV4dEFzY2VudCh0aGlzLl9mb250U2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fZGVzY2VudCA9IHRoaXMuX2ZvbnQuX3RleHREZXNjZW50KHRoaXMuX2ZvbnRTaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2UgYm91bmRzIHRvIGNhbGN1bGF0ZSBmb250IG1ldHJpY3NcclxuICAgIHRoaXMud2lkdGggPSBib3VuZHMudztcclxuICAgIHRoaXMuaGVpZ2h0ID0gYm91bmRzLmg7XHJcbiAgICB0aGlzLmhhbGZXaWR0aCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgdGhpcy5oYWxmSGVpZ2h0ID0gdGhpcy5oZWlnaHQgLyAyO1xyXG4gICAgdGhpcy5fYm91bmRzT2Zmc2V0ID0geyB4OiBib3VuZHMueCwgeTogYm91bmRzLnkgfTtcclxuICAgIHRoaXMuX2Rpc3RCYXNlVG9NaWQgPSBNYXRoLmFicyhib3VuZHMueSkgLSB0aGlzLmhhbGZIZWlnaHQ7XHJcbiAgICB0aGlzLl9kaXN0QmFzZVRvQm90dG9tID0gdGhpcy5oZWlnaHQgLSBNYXRoLmFicyhib3VuZHMueSk7XHJcbn07IiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuQmJveEFsaWduZWRUZXh0ID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJib3hBbGlnbmVkVGV4dDtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IEJib3hBbGlnbmVkVGV4dCBvYmplY3QgLSBhIHRleHQgb2JqZWN0IHRoYXQgY2FuIGJlIGRyYXduIHdpdGhcclxuICogYW5jaG9yIHBvaW50cyBiYXNlZCBvbiBhIHRpZ2h0IGJvdW5kaW5nIGJveCBhcm91bmQgdGhlIHRleHQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge29iamVjdH0gZm9udCAtIHA1LkZvbnQgb2JqZWN0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gU3RyaW5nIHRvIGRpc3BsYXlcclxuICogQHBhcmFtIHtudW1iZXJ9IFtmb250U2l6ZT0xMl0gLSBGb250IHNpemUgdG8gdXNlIGZvciBzdHJpbmdcclxuICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gSW5pdGlhbCB4IGxvY2F0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIEluaXRpYWwgeSBsb2NhdGlvblxyXG4gKiBAcGFyYW0ge29iamVjdH0gW3BJbnN0YW5jZT13aW5kb3ddIC0gUmVmZXJlbmNlIHRvIHA1IGluc3RhbmNlLCBsZWF2ZSBibGFuayBpZlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tldGNoIGlzIGdsb2JhbFxyXG4gKiBAZXhhbXBsZVxyXG4gKiB2YXIgZm9udCwgYmJveFRleHQ7XHJcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XHJcbiAqICAgICBmb250ID0gbG9hZEZvbnQoXCIuL2Fzc2V0cy9SZWd1bGFyLnR0ZlwiKTtcclxuICogfVxyXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcclxuICogICAgIGNyZWF0ZUNhbnZhcyg0MDAsIDYwMCk7XHJcbiAqICAgICBiYWNrZ3JvdW5kKDApO1xyXG4gKiAgICAgXHJcbiAqICAgICBiYm94VGV4dCA9IG5ldyBCYm94QWxpZ25lZFRleHQoZm9udCwgXCJIZXkhXCIsIDMwKTsgICAgXHJcbiAqICAgICBiYm94VGV4dC5zZXRSb3RhdGlvbihQSSAvIDQpO1xyXG4gKiAgICAgYmJveFRleHQuc2V0QW5jaG9yKEJib3hBbGlnbmVkVGV4dC5BTElHTi5CT1hfQ0VOVEVSLCBcclxuICogICAgICAgICAgICAgICAgICAgICAgICBCYm94QWxpZ25lZFRleHQuQkFTRUxJTkUuQk9YX0NFTlRFUik7XHJcbiAqICAgICBcclxuICogICAgIGZpbGwoXCIjMDBBOEVBXCIpO1xyXG4gKiAgICAgbm9TdHJva2UoKTtcclxuICogICAgIGJib3hUZXh0LmRyYXcod2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcclxuICogfVxyXG4gKi9cclxuZnVuY3Rpb24gQmJveEFsaWduZWRUZXh0KGZvbnQsIHRleHQsIGZvbnRTaXplLCB4LCB5LCBwSW5zdGFuY2UpIHtcclxuICAgIHRoaXMuX2ZvbnQgPSBmb250O1xyXG4gICAgdGhpcy5fdGV4dCA9IHRleHQ7XHJcbiAgICB0aGlzLl94ID0gdXRpbHMuZGVmYXVsdCh4LCAwKTtcclxuICAgIHRoaXMuX3kgPSB1dGlscy5kZWZhdWx0KHksIDApO1xyXG4gICAgdGhpcy5fZm9udFNpemUgPSB1dGlscy5kZWZhdWx0KGZvbnRTaXplLCAxMik7XHJcbiAgICB0aGlzLl9wID0gdXRpbHMuZGVmYXVsdChwSW5zdGFuY2UsIHdpbmRvdyk7XHJcbiAgICB0aGlzLl9yb3RhdGlvbiA9IDA7XHJcbiAgICB0aGlzLl9oQWxpZ24gPSBCYm94QWxpZ25lZFRleHQuQUxJR04uQk9YX0NFTlRFUjtcclxuICAgIHRoaXMuX3ZBbGlnbiA9IEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5CT1hfQ0VOVEVSO1xyXG4gICAgdGhpcy5fY2FsY3VsYXRlTWV0cmljcyh0cnVlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFZlcnRpY2FsIGFsaWdubWVudCB2YWx1ZXNcclxuICogQHB1YmxpY1xyXG4gKiBAc3RhdGljXHJcbiAqIEByZWFkb25seVxyXG4gKiBAZW51bSB7c3RyaW5nfVxyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LkFMSUdOID0ge1xyXG4gICAgLyoqIERyYXcgZnJvbSB0aGUgbGVmdCBvZiB0aGUgYmJveCAqL1xyXG4gICAgQk9YX0xFRlQ6IFwiYm94X2xlZnRcIixcclxuICAgIC8qKiBEcmF3IGZyb20gdGhlIGNlbnRlciBvZiB0aGUgYmJveCAqL1xyXG4gICAgQk9YX0NFTlRFUjogXCJib3hfY2VudGVyXCIsXHJcbiAgICAvKiogRHJhdyBmcm9tIHRoZSByaWdodCBvZiB0aGUgYmJveCAqL1xyXG4gICAgQk9YX1JJR0hUOiBcImJveF9yaWdodFwiXHJcbn07XHJcblxyXG4vKipcclxuICogQmFzZWxpbmUgYWxpZ25tZW50IHZhbHVlc1xyXG4gKiBAcHVibGljXHJcbiAqIEBzdGF0aWNcclxuICogQHJlYWRvbmx5XHJcbiAqIEBlbnVtIHtzdHJpbmd9XHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQuQkFTRUxJTkUgPSB7XHJcbiAgICAvKiogRHJhdyBmcm9tIHRoZSB0b3Agb2YgdGhlIGJib3ggKi9cclxuICAgIEJPWF9UT1A6IFwiYm94X3RvcFwiLFxyXG4gICAgLyoqIERyYXcgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBiYm94ICovXHJcbiAgICBCT1hfQ0VOVEVSOiBcImJveF9jZW50ZXJcIixcclxuICAgIC8qKiBEcmF3IGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgYmJveCAqL1xyXG4gICAgQk9YX0JPVFRPTTogXCJib3hfYm90dG9tXCIsXHJcbiAgICAvKiogXHJcbiAgICAgKiBEcmF3IGZyb20gaGFsZiB0aGUgaGVpZ2h0IG9mIHRoZSBmb250LiBTcGVjaWZpY2FsbHkgdGhlIGhlaWdodCBpc1xyXG4gICAgICogY2FsY3VsYXRlZCBhczogYXNjZW50ICsgZGVzY2VudC5cclxuICAgICAqL1xyXG4gICAgRk9OVF9DRU5URVI6IFwiZm9udF9jZW50ZXJcIixcclxuICAgIC8qKiBEcmF3IGZyb20gdGhlIHRoZSBub3JtYWwgZm9udCBiYXNlbGluZSAqL1xyXG4gICAgQUxQSEFCRVRJQzogXCJhbHBoYWJldGljXCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgY3VycmVudCB0ZXh0XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIFRleHQgc3RyaW5nIHRvIGRpc3BsYXlcclxuICogQHJldHVybnMge3RoaXN9IFVzZWZ1bCBmb3IgY2hhaW5pbmdcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG4gICAgdGhpcy5fdGV4dCA9IHN0cmluZztcclxuICAgIHRoaXMuX2NhbGN1bGF0ZU1ldHJpY3MoZmFsc2UpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IHRoZSB0ZXh0IHBvc2l0aW9uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBYIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWSBwb3NpdGlvblxyXG4gKiBAcmV0dXJucyB7dGhpc30gVXNlZnVsIGZvciBjaGFpbmluZ1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHRoaXMuX3ggPSB1dGlscy5kZWZhdWx0KHgsIHRoaXMuX3gpO1xyXG4gICAgdGhpcy5feSA9IHV0aWxzLmRlZmF1bHQoeSwgdGhpcy5feSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHRleHQgcG9zaXRpb25cclxuICogQHB1YmxpY1xyXG4gKiBAcmV0dXJuIHtvYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczogeCwgeVxyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB4OiB0aGlzLl94LFxyXG4gICAgICAgIHk6IHRoaXMuX3lcclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IGN1cnJlbnQgdGV4dCBzaXplXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtudW1iZXJ9IGZvbnRTaXplIFRleHQgc2l6ZVxyXG4gKiBAcmV0dXJucyB7dGhpc30gVXNlZnVsIGZvciBjaGFpbmluZ1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5zZXRUZXh0U2l6ZSA9IGZ1bmN0aW9uKGZvbnRTaXplKSB7XHJcbiAgICB0aGlzLl9mb250U2l6ZSA9IGZvbnRTaXplO1xyXG4gICAgdGhpcy5fY2FsY3VsYXRlTWV0cmljcyh0cnVlKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCByb3RhdGlvbiBvZiB0ZXh0XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gUm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKiBAcmV0dXJucyB7dGhpc30gVXNlZnVsIGZvciBjaGFpbmluZ1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKGFuZ2xlKSB7XHJcbiAgICB0aGlzLl9yb3RhdGlvbiA9IHV0aWxzLmRlZmF1bHQoYW5nbGUsIHRoaXMuX3JvdGF0aW9uKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCByb3RhdGlvbiBvZiB0ZXh0XHJcbiAqIEBwdWJsaWNcclxuICogQHJldHVybnMge251bWJlcn0gUm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5nZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKGFuZ2xlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcm90YXRpb247XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBwIGluc3RhbmNlIHRoYXQgaXMgdXNlZCBmb3IgZHJhd2luZ1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwIC0gSW5zdGFuY2Ugb2YgcDUgZm9yIGRyYXdpbmcuIFRoaXMgaXMgb25seSBuZWVkZWQgd2hlbiBcclxuICogICAgICAgICAgICAgICAgICAgICB1c2luZyBhbiBvZmZzY3JlZW4gcmVuZGVyZXIgb3Igd2hlbiB1c2luZyBwNSBpbiBpbnN0YW5jZVxyXG4gKiAgICAgICAgICAgICAgICAgICAgIG1vZGUuXHJcbiAqIEByZXR1cm5zIHt0aGlzfSBVc2VmdWwgZm9yIGNoYWluaW5nXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLnNldFBJbnN0YW5jZSA9IGZ1bmN0aW9uKHApIHtcclxuICAgIHRoaXMuX3AgPSB1dGlscy5kZWZhdWx0KHAsIHRoaXMuX3ApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHJvdGF0aW9uIG9mIHRleHRcclxuICogQHB1YmxpY1xyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBJbnN0YW5jZSBvZiBwNSB0aGF0IGlzIGJlaW5nIHVzZWQgZm9yIGRyYXdpbmdcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuZ2V0UEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgYW5jaG9yIHBvaW50IGZvciB0ZXh0IChob3Jpem9uYWwgYW5kIHZlcnRpY2FsIGFsaWdubWVudCkgcmVsYXRpdmUgdG9cclxuICogYm91bmRpbmcgYm94XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtoQWxpZ249Q0VOVEVSXSAtIEhvcml6b25hbCBhbGlnbm1lbnRcclxuICogQHBhcmFtIHtzdHJpbmd9IFt2QWxpZ249Q0VOVEVSXSAtIFZlcnRpY2FsIGJhc2VsaW5lXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZVBvc2l0aW9uPWZhbHNlXSAtIElmIHNldCB0byB0cnVlLCB0aGUgcG9zaXRpb24gb2YgdGhlXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0ZXh0IHdpbGwgYmUgc2hpZnRlZCBzbyB0aGF0XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0ZXh0IHdpbGwgYmUgZHJhd24gaW4gdGhlIHNhbWVcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2UgaXQgd2FzIGJlZm9yZSBjYWxsaW5nIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBbmNob3IuXHJcbiAqIEByZXR1cm5zIHt0aGlzfSBVc2VmdWwgZm9yIGNoYWluaW5nXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLnNldEFuY2hvciA9IGZ1bmN0aW9uKGhBbGlnbiwgdkFsaWduLCB1cGRhdGVQb3NpdGlvbikge1xyXG4gICAgdmFyIG9sZFBvcyA9IHRoaXMuX2NhbGN1bGF0ZUFsaWduZWRDb29yZHModGhpcy5feCwgdGhpcy5feSk7XHJcbiAgICB0aGlzLl9oQWxpZ24gPSB1dGlscy5kZWZhdWx0KGhBbGlnbiwgQmJveEFsaWduZWRUZXh0LkFMSUdOLkNFTlRFUik7XHJcbiAgICB0aGlzLl92QWxpZ24gPSB1dGlscy5kZWZhdWx0KHZBbGlnbiwgQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkNFTlRFUik7XHJcbiAgICBpZiAodXBkYXRlUG9zaXRpb24pIHtcclxuICAgICAgICB2YXIgbmV3UG9zID0gdGhpcy5fY2FsY3VsYXRlQWxpZ25lZENvb3Jkcyh0aGlzLl94LCB0aGlzLl95KTtcclxuICAgICAgICB0aGlzLl94ICs9IG9sZFBvcy54IC0gbmV3UG9zLng7XHJcbiAgICAgICAgdGhpcy5feSArPSBvbGRQb3MueSAtIG5ld1Bvcy55O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBib3VuZGluZyBib3ggd2hlbiB0aGUgdGV4dCBpcyBwbGFjZWQgYXQgdGhlIHNwZWNpZmllZCBjb29yZGluYXRlcy5cclxuICogTm90ZTogdGhpcyBpcyB0aGUgdW5yb3RhdGVkIGJvdW5kaW5nIGJveCEgVE9ETzogRml4IHRoaXMuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeD1jdXJyZW50IHhdIC0gQSBuZXcgeCBjb29yZGluYXRlIG9mIHRleHQgYW5jaG9yLiBUaGlzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBjaGFuZ2UgdGhlIHRleHQncyB4IHBvc2l0aW9uIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1hbmVudGx5LiBcclxuICogQHBhcmFtIHtudW1iZXJ9IFt5PWN1cnJlbnQgeV0gLSBBIG5ldyB5IGNvb3JkaW5hdGUgb2YgdGV4dCBhbmNob3IuIFRoaXNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGNoYW5nZSB0aGUgdGV4dCdzIHggcG9zaXRpb24gXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFuZW50bHkuXHJcbiAqIEByZXR1cm4ge29iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzOiB4LCB5LCB3LCBoXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLmdldEJib3ggPSBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgdmFyIHBvcyA9IHRoaXMuX2NhbGN1bGF0ZUFsaWduZWRDb29yZHModGhpcy5feCwgdGhpcy5feSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHg6IHBvcy54ICsgdGhpcy5fYm91bmRzT2Zmc2V0LngsXHJcbiAgICAgICAgeTogcG9zLnkgKyB0aGlzLl9ib3VuZHNPZmZzZXQueSxcclxuICAgICAgICB3OiB0aGlzLndpZHRoLFxyXG4gICAgICAgIGg6IHRoaXMuaGVpZ2h0XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBhbiBhcnJheSBvZiBwb2ludHMgdGhhdCBmb2xsb3cgYWxvbmcgdGhlIHRleHQgcGF0aC4gVGhpcyB3aWxsIHRha2UgaW50b1xyXG4gKiBjb25zaWRlcmF0aW9uIHRoZSBjdXJyZW50IGFsaWdubWVudCBzZXR0aW5ncy5cclxuICogTm90ZTogdGhpcyBpcyBhIHRoaW4gd3JhcHBlciBhcm91bmQgYSBwNSBtZXRob2QgYW5kIGRvZXNuJ3QgaGFuZGxlIHVucm90YXRlZFxyXG4gKiB0ZXh0ISBUT0RPOiBGaXggdGhpcy5cclxuICogQHBhcmFtIHtudW1iZXJ9IFt4PWN1cnJlbnQgeF0gLSBBIG5ldyB4IGNvb3JkaW5hdGUgb2YgdGV4dCBhbmNob3IuIFRoaXNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGNoYW5nZSB0aGUgdGV4dCdzIHggcG9zaXRpb24gXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFuZW50bHkuIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3k9Y3VycmVudCB5XSAtIEEgbmV3IHkgY29vcmRpbmF0ZSBvZiB0ZXh0IGFuY2hvci4gVGhpc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgY2hhbmdlIHRoZSB0ZXh0J3MgeCBwb3NpdGlvbiBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtYW5lbnRseS5cclxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIEFuIG9iamVjdCB0aGF0IGNhbiBoYXZlOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHNhbXBsZUZhY3RvcjogcmF0aW8gb2YgcGF0aC1sZW5ndGggdG8gbnVtYmVyXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Ygc2FtcGxlcyAoZGVmYXVsdD0wLjI1KS4gSGlnaGVyIHZhbHVlcyBcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBtb3JlcG9pbnRzIGFuZCBhcmUgdGhlcmVmb3JlIG1vcmUgXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzZS4gXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gc2ltcGxpZnlUaHJlc2hvbGQ6IGlmIHNldCB0byBhIG5vbi16ZXJvIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLCBjb2xsaW5lYXIgcG9pbnRzIHdpbGwgYmUgcmVtb3ZlZC4gVGhlXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgcmVwcmVzZW50cyB0aGUgdGhyZXNob2xkIGFuZ2xlIHRvIHVzZVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gZGV0ZXJtaW5pbmcgd2hldGhlciB0d28gZWRnZXMgYXJlIFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpbmVhci5cclxuICogQHJldHVybiB7YXJyYXl9IEFuIGFycmF5IG9mIHBvaW50cywgZWFjaCB3aXRoIHgsIHkgJiBhbHBoYSAodGhlIHBhdGggYW5nbGUpXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLmdldFRleHRQb2ludHMgPSBmdW5jdGlvbih4LCB5LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgdmFyIHBvaW50cyA9IHRoaXMuX2ZvbnQudGV4dFRvUG9pbnRzKHRoaXMuX3RleHQsIHRoaXMuX3gsIHRoaXMuX3ksIFxyXG4gICAgICAgIHRoaXMuX2ZvbnRTaXplLCBvcHRpb25zKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMuX2NhbGN1bGF0ZUFsaWduZWRDb29yZHMocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KTtcclxuICAgICAgICBwb2ludHNbaV0ueCA9IHBvcy54O1xyXG4gICAgICAgIHBvaW50c1tpXS55ID0gcG9zLnk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERyYXdzIHRoZSB0ZXh0IHBhcnRpY2xlIHdpdGggdGhlIHNwZWNpZmllZCBzdHlsZSBwYXJhbWV0ZXJzLiBOb3RlOiB0aGlzIGlzXHJcbiAqIGdvaW5nIHRvIHNldCB0aGUgdGV4dEZvbnQsIHRleHRTaXplICYgcm90YXRpb24gYmVmb3JlIGRyYXdpbmcuIFlvdSBzaG91bGQgc2V0XHJcbiAqIHRoZSBjb2xvci9zdHJva2UvZmlsbCB0aGF0IHlvdSB3YW50IGJlZm9yZSBkcmF3aW5nLiBUaGlzIGZ1bmN0aW9uIHdpbGwgY2xlYW5cclxuICogdXAgYWZ0ZXIgaXRzZWxmIGFuZCByZXNldCBzdHlsaW5nIGJhY2sgdG8gd2hhdCBpdCB3YXMgYmVmb3JlIGl0IHdhcyBjYWxsZWQuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtudW1iZXJ9IFt4PWN1cnJlbnQgeF0gLSBBIG5ldyB4IGNvb3JkaW5hdGUgb2YgdGV4dCBhbmNob3IuIFRoaXMgd2lsbFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlIHRoZSB0ZXh0J3MgeCBwb3NpdGlvbiBwZXJtYW5lbnRseS4gXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT1jdXJyZW50IHldIC0gQSBuZXcgeSBjb29yZGluYXRlIG9mIHRleHQgYW5jaG9yLiBUaGlzIHdpbGxcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgdGhlIHRleHQncyB4IHBvc2l0aW9uIHBlcm1hbmVudGx5LlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtkcmF3Qm91bmRzPWZhbHNlXSAtIEZsYWcgZm9yIGRyYXdpbmcgYm91bmRpbmcgYm94XHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbih4LCB5LCBkcmF3Qm91bmRzKSB7XHJcbiAgICBkcmF3Qm91bmRzID0gdXRpbHMuZGVmYXVsdChkcmF3Qm91bmRzLCBmYWxzZSk7XHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgdmFyIHBvcyA9IHtcclxuICAgICAgICB4OiB0aGlzLl94LCBcclxuICAgICAgICB5OiB0aGlzLl95XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX3AucHVzaCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcm90YXRpb24pIHtcclxuICAgICAgICAgICAgcG9zID0gdGhpcy5fY2FsY3VsYXRlUm90YXRlZENvb3Jkcyhwb3MueCwgcG9zLnksIHRoaXMuX3JvdGF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5fcC5yb3RhdGUodGhpcy5fcm90YXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9zID0gdGhpcy5fY2FsY3VsYXRlQWxpZ25lZENvb3Jkcyhwb3MueCwgcG9zLnkpO1xyXG5cclxuICAgICAgICB0aGlzLl9wLnRleHRBbGlnbih0aGlzLl9wLkxFRlQsIHRoaXMuX3AuQkFTRUxJTkUpO1xyXG4gICAgICAgIHRoaXMuX3AudGV4dEZvbnQodGhpcy5fZm9udCk7XHJcbiAgICAgICAgdGhpcy5fcC50ZXh0U2l6ZSh0aGlzLl9mb250U2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fcC50ZXh0KHRoaXMuX3RleHQsIHBvcy54LCBwb3MueSk7XHJcblxyXG4gICAgICAgIGlmIChkcmF3Qm91bmRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Auc3Ryb2tlKDIwMCk7XHJcbiAgICAgICAgICAgIHZhciBib3VuZHNYID0gcG9zLnggKyB0aGlzLl9ib3VuZHNPZmZzZXQueDtcclxuICAgICAgICAgICAgdmFyIGJvdW5kc1kgPSBwb3MueSArIHRoaXMuX2JvdW5kc09mZnNldC55O1xyXG4gICAgICAgICAgICB0aGlzLl9wLm5vRmlsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9wLnJlY3QoYm91bmRzWCwgYm91bmRzWSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB0aGlzLl9wLnBvcCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFByb2plY3QgdGhlIGNvb3JkaW5hdGVzICh4LCB5KSBpbnRvIGEgcm90YXRlZCBjb29yZGluYXRlIHN5c3RlbVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZSAoaW4gdW5yb3RhdGVkIHNwYWNlKVxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZSAoaW4gdW5yb3RhdGVkIHNwYWNlKVxyXG4gKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBSYWRpYW5zIG9mIHJvdGF0aW9uIHRvIGFwcGx5XHJcbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggeCAmIHkgcHJvcGVydGllc1xyXG4gKi9cclxuQmJveEFsaWduZWRUZXh0LnByb3RvdHlwZS5fY2FsY3VsYXRlUm90YXRlZENvb3JkcyA9IGZ1bmN0aW9uICh4LCB5LCBhbmdsZSkgeyAgXHJcbiAgICB2YXIgcnggPSBNYXRoLmNvcyhhbmdsZSkgKiB4ICsgTWF0aC5jb3MoTWF0aC5QSSAvIDIgLSBhbmdsZSkgKiB5O1xyXG4gICAgdmFyIHJ5ID0gLU1hdGguc2luKGFuZ2xlKSAqIHggKyBNYXRoLnNpbihNYXRoLlBJIC8gMiAtIGFuZ2xlKSAqIHk7XHJcbiAgICByZXR1cm4ge3g6IHJ4LCB5OiByeX07XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBkcmF3IGNvb3JkaW5hdGVzIGZvciB0aGUgdGV4dCwgYWxpZ25pbmcgYmFzZWQgb24gdGhlIGJvdW5kaW5nIGJveC5cclxuICogVGhlIHRleHQgaXMgZXZlbnR1YWxseSBkcmF3biB3aXRoIGNhbnZhcyBhbGlnbm1lbnQgc2V0IHRvIGxlZnQgJiBiYXNlbGluZSwgc29cclxuICogdGhpcyBmdW5jdGlvbiB0YWtlcyBhIGRlc2lyZWQgcG9zICYgYWxpZ25tZW50IGFuZCByZXR1cm5zIHRoZSBhcHByb3ByaWF0ZVxyXG4gKiBjb29yZGluYXRlcyBmb3IgdGhlIGxlZnQgJiBiYXNlbGluZS5cclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBYIGNvb3JkaW5hdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGVcclxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCB4ICYgeSBwcm9wZXJ0aWVzXHJcbiAqL1xyXG5CYm94QWxpZ25lZFRleHQucHJvdG90eXBlLl9jYWxjdWxhdGVBbGlnbmVkQ29vcmRzID0gZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgdmFyIG5ld1gsIG5ld1k7XHJcbiAgICBzd2l0Y2ggKHRoaXMuX2hBbGlnbikge1xyXG4gICAgICAgIGNhc2UgQmJveEFsaWduZWRUZXh0LkFMSUdOLkJPWF9MRUZUOlxyXG4gICAgICAgICAgICBuZXdYID0geDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCYm94QWxpZ25lZFRleHQuQUxJR04uQk9YX0NFTlRFUjpcclxuICAgICAgICAgICAgbmV3WCA9IHggLSB0aGlzLmhhbGZXaWR0aDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCYm94QWxpZ25lZFRleHQuQUxJR04uQk9YX1JJR0hUOlxyXG4gICAgICAgICAgICBuZXdYID0geCAtIHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIG5ld1ggPSB4O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVucmVjb2duaXplZCBob3Jpem9uYWwgYWxpZ246XCIsIHRoaXMuX2hBbGlnbik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0aGlzLl92QWxpZ24pIHtcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5CT1hfVE9QOlxyXG4gICAgICAgICAgICBuZXdZID0geSAtIHRoaXMuX2JvdW5kc09mZnNldC55O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5CT1hfQ0VOVEVSOlxyXG4gICAgICAgICAgICBuZXdZID0geSArIHRoaXMuX2Rpc3RCYXNlVG9NaWQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQmJveEFsaWduZWRUZXh0LkJBU0VMSU5FLkJPWF9CT1RUT006XHJcbiAgICAgICAgICAgIG5ld1kgPSB5IC0gdGhpcy5fZGlzdEJhc2VUb0JvdHRvbTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCYm94QWxpZ25lZFRleHQuQkFTRUxJTkUuRk9OVF9DRU5URVI6XHJcbiAgICAgICAgICAgIC8vIEhlaWdodCBpcyBhcHByb3hpbWF0ZWQgYXMgYXNjZW50ICsgZGVzY2VudFxyXG4gICAgICAgICAgICBuZXdZID0geSAtIHRoaXMuX2Rlc2NlbnQgKyAodGhpcy5fYXNjZW50ICsgdGhpcy5fZGVzY2VudCkgLyAyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJib3hBbGlnbmVkVGV4dC5CQVNFTElORS5BTFBIQUJFVElDOlxyXG4gICAgICAgICAgICBuZXdZID0geTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgbmV3WSA9IHk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5yZWNvZ25pemVkIHZlcnRpY2FsIGFsaWduOlwiLCB0aGlzLl92QWxpZ24pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiB7eDogbmV3WCwgeTogbmV3WX07XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYm91bmRpbmcgYm94IGFuZCB2YXJpb3VzIG1ldHJpY3MgZm9yIHRoZSBjdXJyZW50IHRleHQgYW5kIGZvbnRcclxuICogQHByaXZhdGVcclxuICovXHJcbkJib3hBbGlnbmVkVGV4dC5wcm90b3R5cGUuX2NhbGN1bGF0ZU1ldHJpY3MgPSBmdW5jdGlvbihzaG91bGRVcGRhdGVIZWlnaHQpIHsgIFxyXG4gICAgLy8gcDUgMC41LjAgaGFzIGEgYnVnIC0gdGV4dCBib3VuZHMgYXJlIGNsaXBwZWQgYnkgKDAsIDApXHJcbiAgICAvLyBDYWxjdWxhdGluZyBib3VuZHMgaGFja1xyXG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuX2ZvbnQudGV4dEJvdW5kcyh0aGlzLl90ZXh0LCAxMDAwLCAxMDAwLCB0aGlzLl9mb250U2l6ZSk7XHJcbiAgICAvLyBCb3VuZHMgaXMgYSByZWZlcmVuY2UgLSBpZiB3ZSBtZXNzIHdpdGggaXQgZGlyZWN0bHksIHdlIGNhbiBtZXNzIHVwIFxyXG4gICAgLy8gZnV0dXJlIHZhbHVlcyEgKEl0IGNoYW5nZXMgdGhlIGJib3ggY2FjaGUgaW4gcDUuKVxyXG4gICAgYm91bmRzID0geyBcclxuICAgICAgICB4OiBib3VuZHMueCAtIDEwMDAsIFxyXG4gICAgICAgIHk6IGJvdW5kcy55IC0gMTAwMCwgXHJcbiAgICAgICAgdzogYm91bmRzLncsIFxyXG4gICAgICAgIGg6IGJvdW5kcy5oIFxyXG4gICAgfTsgXHJcblxyXG4gICAgaWYgKHNob3VsZFVwZGF0ZUhlaWdodCkge1xyXG4gICAgICAgIHRoaXMuX2FzY2VudCA9IHRoaXMuX2ZvbnQuX3RleHRBc2NlbnQodGhpcy5fZm9udFNpemUpO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NlbnQgPSB0aGlzLl9mb250Ll90ZXh0RGVzY2VudCh0aGlzLl9mb250U2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXNlIGJvdW5kcyB0byBjYWxjdWxhdGUgZm9udCBtZXRyaWNzXHJcbiAgICB0aGlzLndpZHRoID0gYm91bmRzLnc7XHJcbiAgICB0aGlzLmhlaWdodCA9IGJvdW5kcy5oO1xyXG4gICAgdGhpcy5oYWxmV2lkdGggPSB0aGlzLndpZHRoIC8gMjtcclxuICAgIHRoaXMuaGFsZkhlaWdodCA9IHRoaXMuaGVpZ2h0IC8gMjtcclxuICAgIHRoaXMuX2JvdW5kc09mZnNldCA9IHsgeDogYm91bmRzLngsIHk6IGJvdW5kcy55IH07XHJcbiAgICB0aGlzLl9kaXN0QmFzZVRvTWlkID0gTWF0aC5hYnMoYm91bmRzLnkpIC0gdGhpcy5oYWxmSGVpZ2h0O1xyXG4gICAgdGhpcy5fZGlzdEJhc2VUb0JvdHRvbSA9IHRoaXMuaGVpZ2h0IC0gTWF0aC5hYnMoYm91bmRzLnkpO1xyXG59O1xufSx7XCIuL3V0aWxzLmpzXCI6Mn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgcmV0dXJuICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xyXG59O1xufSx7fV19LHt9LFsxXSkoMSlcbn0pO1xuXG4iLCJleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbih2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICByZXR1cm4gKHZhbHVlICE9PSB1bmRlZmluZWQpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XHJcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
